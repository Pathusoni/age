import tkinter as tk
from tkinter import messagebox
import mysql.connector

class SimpleApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple ID Manager with MySQL")

        # Connect to the MySQL database
        self.conn = mysql.connector.connect(
            host="localhost",  # Change this if your database is hosted elsewhere
            user="your_username",  # Replace with your MySQL username
            password="your_password",  # Replace with your MySQL password
            database="your_database"  # Replace with your database name
        )
        self.cursor = self.conn.cursor()

        # Create the table if it doesn't exist
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS ids (
                id VARCHAR(255) PRIMARY KEY
            )
        """)

        # Create widgets
        self.label = tk.Label(root, text="Enter ID:")
        self.label.pack()

        self.entry = tk.Entry(root)
        self.entry.pack()

        self.insert_button = tk.Button(root, text="Insert", command=self.insert)
        self.insert_button.pack()

        self.update_button = tk.Button(root, text="Update", command=self.update)
        self.update_button.pack()

        self.delete_button = tk.Button(root, text="Delete", command=self.delete)
        self.delete_button.pack()

        self.result_label = tk.Label(root, text="")
        self.result_label.pack()

    def insert(self):
        id_value = self.entry.get()
        if id_value:
            try:
                self.cursor.execute("INSERT INTO ids (id) VALUES (%s)", (id_value,))
                self.conn.commit()
                self.result_label.config(text=f"Inserted ID: {id_value}")
            except mysql.connector.IntegrityError:
                messagebox.showwarning("Warning", "ID already exists!")
            except Exception as e:
                messagebox.showerror("Error", str(e))
        else:
            messagebox.showwarning("Warning", "Please enter an ID.")

    def update(self):
        id_value = self.entry.get()
        if id_value:
            new_value = id_value  # You can modify this to take a new value from another entry if needed
            try:
                self.cursor.execute("UPDATE ids SET id = %s WHERE id = %s", (new_value, id_value))
                if self.cursor.rowcount > 0:
                    self.conn.commit()
                    self.result_label.config(text=f"Updated ID: {id_value}")
                else:
                    messagebox.showwarning("Warning", "ID not found!")
            except Exception as e:
                messagebox.showerror("Error", str(e))
        else:
            messagebox.showwarning("Warning", "Please enter an ID.")

    def delete(self):
        id_value = self.entry.get()
        if id_value:
            try:
                self.cursor.execute("DELETE FROM ids WHERE id = %s", (id_value,))
                if self.cursor.rowcount > 0:
                    self.conn.commit()
                    self.result_label.config(text=f"Deleted ID: {id_value}")
                else:
                    messagebox.showwarning("Warning", "ID not found!")
            except Exception as e:
                messagebox.showerror("Error", str(e))
        else:
            messagebox.showwarning("Warning", "Please enter an ID.")

    def on_closing(self):
        self.cursor.close()
        self.conn.close()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = SimpleApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
